#!/usr/bin/env python

# publish to the broker
import paho.mqtt.publish as publish

# listen the broker for a topic
import paho.mqtt.client as client

# library to access website
import urllib2

import time

import twitter

from random import randint


mqtt_broker_ip = "192.168.1.5"

website_url = {
	'get':"http://www.p-space.gr/status/",
	'set':"http://www.p-space.gr/status/set.php?"
}

website_url_param = {
	'0':'close',
	'1':'open',
	'same':''
}

consumer_key=""
consumer_secret=""
access_token_key=""
access_token_secret=""

tweets = {
	  '0': { 
		'status_phrase':'P-Space is now closed!',
		'extra_phrases':[
				'Hasta la vista, babies!', 
				'Au revoir!', 
				'See you later, alligator!'
				' > /dev/null',
				'Ejecting people...',
				'Core dumped.',
				'So Long, and Thanks for All the Fish',
				"I'm sorry Dave. I'm afraid I can't do that",
				"If I'm not back in five minutes, just wait longer.",
				"These are not the hackers you are looking for...",
				'End Of Line',
				"!pspace",
				"DROP TABLE HACKERS;",
				"May the Force be with you."
				]
	       }, 
	  '1': {
		'status_phrase':'P-Space is now open!',
		'extra_phrases':[
				'Please, come in!', 
				'Come, we have cookies...', 
				'Join the party!',
				'Probably...',
				'Commencing operations...',
				'System booting...',
				'Bring coffee.',
				'Access granted!',
				'Alright, alright, alright',
				'Greetings, programs!',
				'DEVELOPERS, DEVELOPERS, DEVELOPERS!',
				'I have a bad feeling about this...',
				"It's showtime!",
				"It's a trap!"
				]
	       }
	}
# What to do when connecting to the broker
def mqtt_on_connect(status_client, userdata, return_code):
	# Subscribing in on_connect() means that if we lose the connection and
	# reconnect then subscriptions will be renewed.
	status_client.subscribe("status/#")


# What to do when a new message is received
def mqtt_on_message(status_client, userdata, message):
	global status
	# Only listen to the 'status' topic
	if "status" in message.topic:

		payload = message.payload.strip()

		# If a question regarding the status is received
		if  payload == "?":
			status_client.publish("status", status)

		# If a status change is received
		elif payload in ["0", "1"] and payload != status:
			status = set_get_status_website(mode = "set", new_status = payload)
			twitter_post(payload)
			'''
			if payload == "1":
				twitterapi.PostUpdate('P-Space is now open!')
			else: 
				twitterapi.PostUpdate('P-Space is now closed!')
			'''
			

# Create an mqtt client to subscribe and publish 
def mqtt_init_client():
	s_client = client.Client()
	s_client.on_connect = mqtt_on_connect
	s_client.on_message = mqtt_on_message
	s_client.loop_start()
	s_client.connect(mqtt_broker_ip)

	return s_client


def twitter_post(payload):
	twitterapi.PostUpdate(tweets[payload]['status_phrase'] + " " + tweets[payload]['extra_phrases'][randint(0, len(tweets[payload]['extra_phrases']) - 1)])
	
def twitter_init():
	api = twitter.Api(consumer_key,
                  consumer_secret,                
                  access_token_key,
                  access_token_secret)

	return api;


# Get the current status from the website
def set_get_status_website(mode = "get", new_status = 'same'):
	try:
		web_request = urllib2.urlopen(website_url[mode] + website_url_param[new_status])
		
		if web_request.code == 200:
			if new_status == "same":
				ret = web_request.read().strip()
			else:
				status_client.publish("status", new_status)
				return new_status

	except urllib2.URLError:
		ret = "0"
	
	return ret
	

status = set_get_status_website()

status_client = mqtt_init_client()

twitterapi = twitter_init()

while True:
	time.sleep(60)
	new_status = set_get_status_website()
	if status != new_status:
		status = set_get_status_website(mode = "set", new_status = new_status)

